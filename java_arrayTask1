package com.max.idea;
import java.util.Arrays;
import java.util.Scanner;

public class Main {
    private static final Scanner in = new Scanner(System.in);
    public static void main(String[] args)
    {
        newHospital();
    }
    private static void newHospital(){
        System.out.print("Введите количество больных: ");
        while(readInput() < 0)
            System.out.println("Неккорктный ввод");
        Hospital hospital = new Hospital(readInput());
        System.out.println(hospital.getReport());
    }
    private static Integer readInput(){
        int input;
        String str = in.next();
        input = Integer.parseInt(str);
        return input;
    }
}
class Hospital {
    private final int patientsCount;
    private int healthyPatients;
    private float[] patientsTemp = null;
    private String stringTemp;
    private double middleTemp;
    private String report;
    public Hospital(int patientsCount)
    {
        if (patientsCount < 0)
        {
            throw new IllegalArgumentException();
        } else
        {
            this.patientsCount = patientsCount;
            generatePatientsTemperatures();
            this.healthyPatients = -1;
            this.middleTemp = -1;
        }
    }
    public float[] generatePatientsTemperatures()
    {
        float[] arrayTemp = new float[patientsCount];
        if(patientsTemp == null)
        {
            for (int i = 0; i < arrayTemp.length; i++)
        {
            arrayTemp[i] = (float) ((Math.random() * ((39f - 32f) + 1)) + 32f);
        }
            patientsTemp = arrayTemp;
        }
        return patientsTemp;
    }

    public String getTemperaturesToString()
    {
        if (stringTemp == null)
        {
            StringBuilder result = new StringBuilder();
            StringBuilder currentTemp;

            for (Float temp : patientsTemp)
            {
                currentTemp = new StringBuilder(String.format("%.1f",temp));
                currentTemp.setCharAt(2,',');
                result.append(currentTemp).append(' ');
            }
            stringTemp = result.deleteCharAt(result.length() - 1).toString();
        }
        return stringTemp;
    }
    public int getCountHealthy()
    {
        if (healthyPatients == -1)
        {
            healthyPatients = 0;
            for (Float temp : patientsTemp)
            {
                if ((temp >= 36.2) & (temp <= 36.9))
                {
                    healthyPatients++;
                }
            }
        }
        return healthyPatients;
    }

    public double getAverageTemp() {
        var tempD = new double[patientsCount];
        var i = 0;

        if (middleTemp == -1)
        {
            middleTemp = 0;
            for (Float temp : patientsTemp)
            {
                tempD[i++] = temp.doubleValue();
            }
            middleTemp = Arrays.stream(tempD).average().getAsDouble();
        }
        return middleTemp;
    }
    public String getReport() {
        if (report == null)
        {
            report = "Температуры пациентов: " + getTemperaturesToString() +
                    "\nСредняя температура: " + String.format("%.2f", getAverageTemp()) +
                    "\nКоличество здоровых: " + getCountHealthy();
        }
        return report;
    }
}
